package com.zhisland.yueju.service.concurrenttest;

import java.util.concurrent.CountDownLatch;

/**
 * 用于使线程A等待其它线程都执行完毕再执行
 * Created by mma on 16/10/11.
 */
public class CountDownLatchTest {

    final static CountDownLatch countDownLatch = new CountDownLatch(2);


    static class CountDownLatchTestThread1 implements Runnable{
        @Override
        public void run() {
            System.out.println(Thread.currentThread().getName()+"run111 begin");
            try {
                Thread.sleep(5000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }finally {
                countDownLatch.countDown();
            }
            System.out.println(Thread.currentThread().getName()+"run111 end");
        }
    }

    class CountDownLatchTestThread2 implements Runnable{
        @Override
        public void run() {
            System.out.println(Thread.currentThread().getName()+"run222 begin");
            try {
                Thread.sleep(5000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }finally {
                countDownLatch.countDown();
            }
            System.out.println(Thread.currentThread().getName()+"run222 end");
        }
    }

    class CountDownLatchTestThread3 implements Runnable{
        @Override
        public void run() {
            try {
                System.out.println(Thread.currentThread().getName()+"run333 wait");
                countDownLatch.await();
                System.out.println("count down value--->"+countDownLatch.getCount());
                System.out.println(Thread.currentThread().getName()+"run333 begin");
                Thread.sleep(2000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println(Thread.currentThread().getName()+"run333 end");
        }
    }

    public static void main(String[] args) {
        CountDownLatchTest countDownLatchTest = new CountDownLatchTest();
//        CountDownLatchTest.CountDownLatchTestThread2 countDownLatchTest2 = countDownLatchTest.new CountDownLatchTestThread2();
        CountDownLatchTest.CountDownLatchTestThread3 countDownLatchTest3 = countDownLatchTest.new CountDownLatchTestThread3();
        Thread t1 = new Thread(new CountDownLatchTestThread1());
        Thread t2 = new Thread(new CountDownLatchTestThread1());
        Thread t3 = new Thread(countDownLatchTest3);
        t1.start();
        t2.start();
        t3.start();
    }
}
