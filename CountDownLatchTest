package com.zhisland.yueju.service.concurrenttest;

import java.util.concurrent.CountDownLatch;

/**
 * 用于使线程A等待其它线程都执行完毕再执行
 * Created by mma on 16/10/11.
 */
public class CountDownLatchTest {

    final static CountDownLatch countDownLatch = new CountDownLatch(2);


    static class CountDownLatchTestThread1 implements Runnable{

        private int index;

        private String name;

        public CountDownLatchTestThread1(int index, String name) {
            this.index = index;
            this.name = name;
        }

        @Override
        public void run() {
            System.out.println(this.name+" run begin");
            try {
                Thread.sleep(5000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }finally {
                System.out.println(this.name+" run end");
                countDownLatch.countDown();
            }
        }
    }

    static class CountDownLatchTestThread3 implements Runnable{

        private String name;

        public CountDownLatchTestThread3(String name) {
            this.name = name;
        }

        @Override
        public void run() {
            try {
                System.out.println(this.name+" run wait");
                countDownLatch.await();
                System.out.println("count down value--->"+countDownLatch.getCount());
                System.out.println(Thread.currentThread().getName()+"run333 begin");
                Thread.sleep(2000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println(this.name+" run end");
        }
    }

    public static void main(String[] args) {
        for(int i = 0; i<2;i++) {
            Thread t = new Thread(new CountDownLatchTestThread1(i,"name-->"+i));
            t.start();
        }
        Thread t3 = new Thread(new CountDownLatchTestThread3("name3"));
        t3.start();
    }
}
